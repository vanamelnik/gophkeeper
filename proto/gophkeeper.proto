/*
    GophKeeper protobuf definitions
*/
syntax="proto3";

package proto;
option go_package="./proto";

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

service gophkeeper {
    // SignUp registers a new user and creates a new user session.
    rpc SignUp(SignInData) returns (UserAuth);
    // LogIn creates a new session for the user provided.
    rpc LogIn(SignInData) returns (UserAuth);
    // GetNewTokens generates a new AccessToken + RefreshToken pair.
    // If refresh token is expired, the session ends.
    rpc GetNewTokens(RefreshToken) returns (UserAuth);
    // LogOut ends current user session.
    rpc LogOut(RefreshToken) returns (google.protobuf.Empty);
    // TODO:
    // ChangePassword
    // DeleteUser
    // LogoutAllSessions - выйти отовсюду для данного пользователя

    // PublishLocalChanges applies the changes to the storage on the server.
    // This method is allowed only if the version of user's data on the client side is equal
    // to the version number on the server. Otherwise the error is returned and the client 
    // must first update data from the server.
    rpc PublishLocalChanges(PublishLocalChangesRequest) returns (google.protobuf.Empty);

    // DownloadUserData downloads latest snapshot of the user's data from the server.
    // If data_version field equals to version of the data on the server, the error "already
    // up to date" is thrown.
    rpc DownloadUserData(UserDataRequest) returns (UserData);
}

message Item {
    ItemID item_id = 1;
    oneof data {
        Password password = 2;
        Blob blob = 3;
        Text text = 4;
        Card card = 5;
    }
    google.protobuf.Timestamp created_at = 6;
    google.protobuf.Timestamp deleted_at = 7;
    Metadata metadata = 100;
}

message Password {
    string password = 1;
}

message Blob {
    bytes data = 1;
}

message Text {
    string text = 1;
}

message Card {
    string number = 1;
    string name = 2;
    string date = 3;
    uint32 cvc = 4;
}

message UserData {
    uint64 version = 1;
    repeated Item items = 2;
}

// Metadata is JSON string with metadata key:value pairs.
message Metadata {
    string metadata = 1;
}

message ItemID {
    string item_id = 1;
}

message UserAuth {
    AccessToken access_token = 1;
    RefreshToken  refresh_token = 2;
}

message AccessToken {
    string access_token = 1;
}

message RefreshToken {
    string refresh_token = 1;
}

message SignInData {
    string user_name = 1;
    string user_password = 2;
}

message Event {
    enum Operation {
        CREATE = 0;
        UPDATE = 1;
        DELETE = 2;
    }
    Operation operation = 1;
    Item item = 2;
}

message UserDataRequest {
    AccessToken token = 1;
    uint64 data_version = 2;
}

message PublishLocalChangesRequest {
    AccessToken token = 1;
    uint64 data_version = 2;
    repeated Event events = 3;
}